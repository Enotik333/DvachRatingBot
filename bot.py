import json
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8284745407:AAFqGY7YtN4-pWe-75yEUor1o1cWcsrKG8w"  # –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω
DATA_FILE = "data.json"
UP_WORDS = ["+", "–∞–ø", "–¥–≤–∞—á—É—é", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é"]
DOWN_WORDS = ["—Å–∞–∂–∞"]

# === –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    data = load_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = str(target_user.id)
        target_name = target_user.first_name
        data.setdefault(target_id, {"name": target_name, "score": 0})

        # –ü–æ–≤—ã—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        if any(word in text.split() for word in UP_WORDS):
            data[target_id]["score"] += 1
            save_data(data)
            await update.message.reply_text(f"üëç {target_name}, —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {data[target_id]['score']}")

        # –ü–æ–Ω–∏–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        elif any(word in text.split() for word in DOWN_WORDS):
            data[target_id]["score"] -= 1
            save_data(data)
            await update.message.reply_text(f"üëé {target_name}, —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {data[target_id]['score']}")

# === –ö–û–ú–ê–ù–î–´ ===
async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = str(update.message.from_user.id)
    score = data.get(user_id, {}).get("score", 0)
    await update.message.reply_text(f"üí¨ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {score}")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∞–ø–∞–ª—Å—è üòÖ")
        return
    top_users = sorted(data.values(), key=lambda x: x["score"], reverse=True)
    text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user in enumerate(top_users[:10], start=1):
        text += f"{i}. {user['name']} ‚Äî {user['score']}\n"
    await update.message.reply_text(text)

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
app.add_handler(CommandHandler("me", me))
app.add_handler(CommandHandler("top", top))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
